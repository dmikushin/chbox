#!/usr/bin/env python3
import unittest
import subprocess

class TestCommandReconstruction(unittest.TestCase):

    def test_command_reconstruction(self):
        test_cases = [
            {
                'command': ['./bwrapx', '--help'],
                'expected': 'bwrap - container setup utility',
                'full_match': False
            },
            {
                'command': ['./bwrapx', '--bind', 'a', 'b', '--bind', 'c', 'd', 'bash', '-i'],
                'expected': 'bwrap --bind a b --bind c d bash -i',
                'full_match': True
            },
            {
                'command': ['./bwrapx', '--bind', 'a', 'b', '--bind', 'c', 'd', '--', 'bash', '-i'],
                'expected': 'bwrap --bind a b --bind c d -- bash -i',
                'full_match': True
            },
        ]

        for test_case in test_cases:
            command = test_case['command']
            expected = test_case['expected']
            full_match = test_case['full_match']

            # Run your script with the provided command line
            completed_process = subprocess.run(command, capture_output=True, text=True)

            # Retrieve the stderr output from the completed process
            actual = completed_process.stdout.strip()

            # Check if the help message is successfully displayed
            if not full_match:
                # Assert that the expected output is within the actual output
                self.assertIn(expected, actual)
            else:
                # Assert that the actual output matches the expected output
                self.assertEqual(actual, expected)


if __name__ == '__main__':
    unittest.main()

